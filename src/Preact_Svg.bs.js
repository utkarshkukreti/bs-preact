// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE

import * as Preact_Core from "./Preact_Core.bs.js";

function a(param, param$1) {
  return Preact_Core.element("a", param, param$1);
}

function animate(param, param$1) {
  return Preact_Core.element("animate", param, param$1);
}

function animateColor(param, param$1) {
  return Preact_Core.element("animateColor", param, param$1);
}

function animateMotion(param, param$1) {
  return Preact_Core.element("animateMotion", param, param$1);
}

function animateTransform(param, param$1) {
  return Preact_Core.element("animateTransform", param, param$1);
}

function circle(param, param$1) {
  return Preact_Core.element("circle", param, param$1);
}

function clipPath(param, param$1) {
  return Preact_Core.element("clipPath", param, param$1);
}

function colorProfile(param, param$1) {
  return Preact_Core.element("color-profile", param, param$1);
}

function cursor(param, param$1) {
  return Preact_Core.element("cursor", param, param$1);
}

function defs(param, param$1) {
  return Preact_Core.element("defs", param, param$1);
}

function desc(param, param$1) {
  return Preact_Core.element("desc", param, param$1);
}

function discard(param, param$1) {
  return Preact_Core.element("discard", param, param$1);
}

function ellipse(param, param$1) {
  return Preact_Core.element("ellipse", param, param$1);
}

function feBlend(param, param$1) {
  return Preact_Core.element("feBlend", param, param$1);
}

function feColorMatrix(param, param$1) {
  return Preact_Core.element("feColorMatrix", param, param$1);
}

function feComponentTransfer(param, param$1) {
  return Preact_Core.element("feComponentTransfer", param, param$1);
}

function feComposite(param, param$1) {
  return Preact_Core.element("feComposite", param, param$1);
}

function feConvolveMatrix(param, param$1) {
  return Preact_Core.element("feConvolveMatrix", param, param$1);
}

function feDiffuseLighting(param, param$1) {
  return Preact_Core.element("feDiffuseLighting", param, param$1);
}

function feDisplacementMap(param, param$1) {
  return Preact_Core.element("feDisplacementMap", param, param$1);
}

function feDistantLight(param, param$1) {
  return Preact_Core.element("feDistantLight", param, param$1);
}

function feDropShadow(param, param$1) {
  return Preact_Core.element("feDropShadow", param, param$1);
}

function feFlood(param, param$1) {
  return Preact_Core.element("feFlood", param, param$1);
}

function feFuncA(param, param$1) {
  return Preact_Core.element("feFuncA", param, param$1);
}

function feFuncB(param, param$1) {
  return Preact_Core.element("feFuncB", param, param$1);
}

function feFuncG(param, param$1) {
  return Preact_Core.element("feFuncG", param, param$1);
}

function feFuncR(param, param$1) {
  return Preact_Core.element("feFuncR", param, param$1);
}

function feGaussianBlur(param, param$1) {
  return Preact_Core.element("feGaussianBlur", param, param$1);
}

function feImage(param, param$1) {
  return Preact_Core.element("feImage", param, param$1);
}

function feMerge(param, param$1) {
  return Preact_Core.element("feMerge", param, param$1);
}

function feMergeNode(param, param$1) {
  return Preact_Core.element("feMergeNode", param, param$1);
}

function feMorphology(param, param$1) {
  return Preact_Core.element("feMorphology", param, param$1);
}

function feOffset(param, param$1) {
  return Preact_Core.element("feOffset", param, param$1);
}

function fePointLight(param, param$1) {
  return Preact_Core.element("fePointLight", param, param$1);
}

function feSpecularLighting(param, param$1) {
  return Preact_Core.element("feSpecularLighting", param, param$1);
}

function feSpotLight(param, param$1) {
  return Preact_Core.element("feSpotLight", param, param$1);
}

function feTile(param, param$1) {
  return Preact_Core.element("feTile", param, param$1);
}

function feTurbulence(param, param$1) {
  return Preact_Core.element("feTurbulence", param, param$1);
}

function filter(param, param$1) {
  return Preact_Core.element("filter", param, param$1);
}

function font(param, param$1) {
  return Preact_Core.element("font", param, param$1);
}

function fontFace(param, param$1) {
  return Preact_Core.element("font-face", param, param$1);
}

function fontFaceFormat(param, param$1) {
  return Preact_Core.element("font-face-format", param, param$1);
}

function fontFaceName(param, param$1) {
  return Preact_Core.element("font-face-name", param, param$1);
}

function fontFaceSrc(param, param$1) {
  return Preact_Core.element("font-face-src", param, param$1);
}

function fontFaceUri(param, param$1) {
  return Preact_Core.element("font-face-uri", param, param$1);
}

function foreignObject(param, param$1) {
  return Preact_Core.element("foreignObject", param, param$1);
}

function g(param, param$1) {
  return Preact_Core.element("g", param, param$1);
}

function glyph(param, param$1) {
  return Preact_Core.element("glyph", param, param$1);
}

function glyphRef(param, param$1) {
  return Preact_Core.element("glyphRef", param, param$1);
}

function hatch(param, param$1) {
  return Preact_Core.element("hatch", param, param$1);
}

function hatchpath(param, param$1) {
  return Preact_Core.element("hatchpath", param, param$1);
}

function hkern(param, param$1) {
  return Preact_Core.element("hkern", param, param$1);
}

function image(param, param$1) {
  return Preact_Core.element("image", param, param$1);
}

function line(param, param$1) {
  return Preact_Core.element("line", param, param$1);
}

function linearGradient(param, param$1) {
  return Preact_Core.element("linearGradient", param, param$1);
}

function marker(param, param$1) {
  return Preact_Core.element("marker", param, param$1);
}

function mask(param, param$1) {
  return Preact_Core.element("mask", param, param$1);
}

function mesh(param, param$1) {
  return Preact_Core.element("mesh", param, param$1);
}

function meshgradient(param, param$1) {
  return Preact_Core.element("meshgradient", param, param$1);
}

function meshpatch(param, param$1) {
  return Preact_Core.element("meshpatch", param, param$1);
}

function meshrow(param, param$1) {
  return Preact_Core.element("meshrow", param, param$1);
}

function metadata(param, param$1) {
  return Preact_Core.element("metadata", param, param$1);
}

function missingGlyph(param, param$1) {
  return Preact_Core.element("missing-glyph", param, param$1);
}

function mpath(param, param$1) {
  return Preact_Core.element("mpath", param, param$1);
}

function path(param, param$1) {
  return Preact_Core.element("path", param, param$1);
}

function pattern(param, param$1) {
  return Preact_Core.element("pattern", param, param$1);
}

function polygon(param, param$1) {
  return Preact_Core.element("polygon", param, param$1);
}

function polyline(param, param$1) {
  return Preact_Core.element("polyline", param, param$1);
}

function radialGradient(param, param$1) {
  return Preact_Core.element("radialGradient", param, param$1);
}

function rect(param, param$1) {
  return Preact_Core.element("rect", param, param$1);
}

function script(param, param$1) {
  return Preact_Core.element("script", param, param$1);
}

function set(param, param$1) {
  return Preact_Core.element("set", param, param$1);
}

function solidcolor(param, param$1) {
  return Preact_Core.element("solidcolor", param, param$1);
}

function stop(param, param$1) {
  return Preact_Core.element("stop", param, param$1);
}

function style$prime(param, param$1) {
  return Preact_Core.element("style", param, param$1);
}

function svg(param, param$1) {
  return Preact_Core.element("svg", param, param$1);
}

function $$switch(param, param$1) {
  return Preact_Core.element("switch", param, param$1);
}

function symbol(param, param$1) {
  return Preact_Core.element("symbol", param, param$1);
}

function text(param, param$1) {
  return Preact_Core.element("text", param, param$1);
}

function textPath(param, param$1) {
  return Preact_Core.element("textPath", param, param$1);
}

function title(param, param$1) {
  return Preact_Core.element("title", param, param$1);
}

function tref(param, param$1) {
  return Preact_Core.element("tref", param, param$1);
}

function tspan(param, param$1) {
  return Preact_Core.element("tspan", param, param$1);
}

function unknown(param, param$1) {
  return Preact_Core.element("unknown", param, param$1);
}

function use(param, param$1) {
  return Preact_Core.element("use", param, param$1);
}

function view(param, param$1) {
  return Preact_Core.element("view", param, param$1);
}

function vkern(param, param$1) {
  return Preact_Core.element("vkern", param, param$1);
}

function accentHeight(value) {
  return Preact_Core.property("accent-height", value);
}

function accumulate(value) {
  return Preact_Core.property("accumulate", value);
}

function additive(value) {
  return Preact_Core.property("additive", value);
}

function alignmentBaseline(value) {
  return Preact_Core.property("alignment-baseline", value);
}

function ascent(value) {
  return Preact_Core.property("ascent", value);
}

function attributeName(value) {
  return Preact_Core.property("attributeName", value);
}

function attributeType(value) {
  return Preact_Core.property("attributeType", value);
}

function azimuth(value) {
  return Preact_Core.property("azimuth", value);
}

function baseFrequency(value) {
  return Preact_Core.property("baseFrequency", value);
}

function baseProfile(value) {
  return Preact_Core.property("baseProfile", value);
}

function baselineShift(value) {
  return Preact_Core.property("baseline-shift", value);
}

function begin$prime(value) {
  return Preact_Core.property("begin", value);
}

function bias(value) {
  return Preact_Core.property("bias", value);
}

function calcMode(value) {
  return Preact_Core.property("calcMode", value);
}

function clipPath$prime(value) {
  return Preact_Core.property("clip-path", value);
}

function clipRule(value) {
  return Preact_Core.property("clip-rule", value);
}

function clipPathUnits(value) {
  return Preact_Core.property("clipPathUnits", value);
}

function color(value) {
  return Preact_Core.property("color", value);
}

function colorInterpolation(value) {
  return Preact_Core.property("color-interpolation", value);
}

function colorInterpolationFilters(value) {
  return Preact_Core.property("color-interpolation-filters", value);
}

function colorProfile$prime(value) {
  return Preact_Core.property("color-profile", value);
}

function colorRendering(value) {
  return Preact_Core.property("color-rendering", value);
}

function contentScriptType(value) {
  return Preact_Core.property("contentScriptType", value);
}

function contentStyleType(value) {
  return Preact_Core.property("contentStyleType", value);
}

function cursor$prime(value) {
  return Preact_Core.property("cursor", value);
}

function cx(value) {
  return Preact_Core.property("cx", value);
}

function cy(value) {
  return Preact_Core.property("cy", value);
}

function d(value) {
  return Preact_Core.property("d", value);
}

function diffuseConstant(value) {
  return Preact_Core.property("diffuseConstant", value);
}

function direction(value) {
  return Preact_Core.property("direction", value);
}

function display(value) {
  return Preact_Core.property("display", value);
}

function divisor(value) {
  return Preact_Core.property("divisor", value);
}

function dominantBaseline(value) {
  return Preact_Core.property("dominant-baseline", value);
}

function dur(value) {
  return Preact_Core.property("dur", value);
}

function dx(value) {
  return Preact_Core.property("dx", value);
}

function dy(value) {
  return Preact_Core.property("dy", value);
}

function edgeMode(value) {
  return Preact_Core.property("edgeMode", value);
}

function elevation(value) {
  return Preact_Core.property("elevation", value);
}

function end$prime(value) {
  return Preact_Core.property("end", value);
}

function externalResourcesRequired(value) {
  return Preact_Core.property("externalResourcesRequired", value);
}

function fill(value) {
  return Preact_Core.property("fill", value);
}

function fillOpacity(value) {
  return Preact_Core.property("fill-opacity", value);
}

function fillRule(value) {
  return Preact_Core.property("fill-rule", value);
}

function filter$prime(value) {
  return Preact_Core.property("filter", value);
}

function filterUnits(value) {
  return Preact_Core.property("filterUnits", value);
}

function floodColor(value) {
  return Preact_Core.property("flood-color", value);
}

function floodOpacity(value) {
  return Preact_Core.property("flood-opacity", value);
}

function fontFamily(value) {
  return Preact_Core.property("font-family", value);
}

function fontSize(value) {
  return Preact_Core.property("font-size", value);
}

function fontSizeAdjust(value) {
  return Preact_Core.property("font-size-adjust", value);
}

function fontStretch(value) {
  return Preact_Core.property("font-stretch", value);
}

function fontStyle(value) {
  return Preact_Core.property("font-style", value);
}

function fontVariant(value) {
  return Preact_Core.property("font-variant", value);
}

function fontWeight(value) {
  return Preact_Core.property("font-weight", value);
}

function fr(value) {
  return Preact_Core.property("fr", value);
}

function from(value) {
  return Preact_Core.property("from", value);
}

function fx(value) {
  return Preact_Core.property("fx", value);
}

function fy(value) {
  return Preact_Core.property("fy", value);
}

function gradientTransform(value) {
  return Preact_Core.property("gradientTransform", value);
}

function gradientUnits(value) {
  return Preact_Core.property("gradientUnits", value);
}

function height(value) {
  return Preact_Core.property("height", value);
}

function href(value) {
  return Preact_Core.property("href", value);
}

function imageRendering(value) {
  return Preact_Core.property("image-rendering", value);
}

function in$prime(value) {
  return Preact_Core.property("in", value);
}

function in2(value) {
  return Preact_Core.property("in2", value);
}

function k1(value) {
  return Preact_Core.property("k1", value);
}

function k2(value) {
  return Preact_Core.property("k2", value);
}

function k3(value) {
  return Preact_Core.property("k3", value);
}

function k4(value) {
  return Preact_Core.property("k4", value);
}

function kernelMatrix(value) {
  return Preact_Core.property("kernelMatrix", value);
}

function kernelUnitLength(value) {
  return Preact_Core.property("kernelUnitLength", value);
}

function kerning(value) {
  return Preact_Core.property("kerning", value);
}

function keySplines(value) {
  return Preact_Core.property("keySplines", value);
}

function keyTimes(value) {
  return Preact_Core.property("keyTimes", value);
}

function lengthAdjust(value) {
  return Preact_Core.property("lengthAdjust", value);
}

function letterSpacing(value) {
  return Preact_Core.property("letter-spacing", value);
}

function lightingColor(value) {
  return Preact_Core.property("lighting-color", value);
}

function limitingConeAngle(value) {
  return Preact_Core.property("limitingConeAngle", value);
}

function local(value) {
  return Preact_Core.property("local", value);
}

function markerEnd(value) {
  return Preact_Core.property("marker-end", value);
}

function markerMid(value) {
  return Preact_Core.property("marker-mid", value);
}

function markerStart(value) {
  return Preact_Core.property("marker-start", value);
}

function markerHeight(value) {
  return Preact_Core.property("markerHeight", value);
}

function markerUnits(value) {
  return Preact_Core.property("markerUnits", value);
}

function markerWidth(value) {
  return Preact_Core.property("markerWidth", value);
}

function mask$prime(value) {
  return Preact_Core.property("mask", value);
}

function maskContentUnits(value) {
  return Preact_Core.property("maskContentUnits", value);
}

function maskUnits(value) {
  return Preact_Core.property("maskUnits", value);
}

function max(value) {
  return Preact_Core.property("max", value);
}

function min(value) {
  return Preact_Core.property("min", value);
}

function mode(value) {
  return Preact_Core.property("mode", value);
}

function numOctaves(value) {
  return Preact_Core.property("numOctaves", value);
}

function opacity(value) {
  return Preact_Core.property("opacity", value);
}

function operator(value) {
  return Preact_Core.property("operator", value);
}

function order(value) {
  return Preact_Core.property("order", value);
}

function overflow(value) {
  return Preact_Core.property("overflow", value);
}

function overlinePosition(value) {
  return Preact_Core.property("overline-position", value);
}

function overlineThickness(value) {
  return Preact_Core.property("overline-thickness", value);
}

function paintOrder(value) {
  return Preact_Core.property("paint-order", value);
}

function pathLength(value) {
  return Preact_Core.property("pathLength", value);
}

function patternContentUnits(value) {
  return Preact_Core.property("patternContentUnits", value);
}

function patternTransform(value) {
  return Preact_Core.property("patternTransform", value);
}

function patternUnits(value) {
  return Preact_Core.property("patternUnits", value);
}

function pointerEvents(value) {
  return Preact_Core.property("pointer-events", value);
}

function points(value) {
  return Preact_Core.property("points", value);
}

function pointsAtX(value) {
  return Preact_Core.property("pointsAtX", value);
}

function pointsAtY(value) {
  return Preact_Core.property("pointsAtY", value);
}

function pointsAtZ(value) {
  return Preact_Core.property("pointsAtZ", value);
}

function preserveAlpha(value) {
  return Preact_Core.property("preserveAlpha", value);
}

function preserveAspectRatio(value) {
  return Preact_Core.property("preserveAspectRatio", value);
}

function primitiveUnits(value) {
  return Preact_Core.property("primitiveUnits", value);
}

function r(value) {
  return Preact_Core.property("r", value);
}

function radius(value) {
  return Preact_Core.property("radius", value);
}

function refX(value) {
  return Preact_Core.property("refX", value);
}

function refY(value) {
  return Preact_Core.property("refY", value);
}

function repeatCount(value) {
  return Preact_Core.property("repeatCount", value);
}

function repeatDur(value) {
  return Preact_Core.property("repeatDur", value);
}

function requiredFeatures(value) {
  return Preact_Core.property("requiredFeatures", value);
}

function restart(value) {
  return Preact_Core.property("restart", value);
}

function result(value) {
  return Preact_Core.property("result", value);
}

function rx(value) {
  return Preact_Core.property("rx", value);
}

function ry(value) {
  return Preact_Core.property("ry", value);
}

function scale(value) {
  return Preact_Core.property("scale", value);
}

function seed(value) {
  return Preact_Core.property("seed", value);
}

function shapeRendering(value) {
  return Preact_Core.property("shape-rendering", value);
}

function specularConstant(value) {
  return Preact_Core.property("specularConstant", value);
}

function specularExponent(value) {
  return Preact_Core.property("specularExponent", value);
}

function stdDeviation(value) {
  return Preact_Core.property("stdDeviation", value);
}

function stitchTiles(value) {
  return Preact_Core.property("stitchTiles", value);
}

function stopColor(value) {
  return Preact_Core.property("stop-color", value);
}

function stopOpacity(value) {
  return Preact_Core.property("stop-opacity", value);
}

function strikethroughPosition(value) {
  return Preact_Core.property("strikethrough-position", value);
}

function strikethroughThickness(value) {
  return Preact_Core.property("strikethrough-thickness", value);
}

function stroke(value) {
  return Preact_Core.property("stroke", value);
}

function strokeDasharray(value) {
  return Preact_Core.property("stroke-dasharray", value);
}

function strokeDashoffset(value) {
  return Preact_Core.property("stroke-dashoffset", value);
}

function strokeLinecap(value) {
  return Preact_Core.property("stroke-linecap", value);
}

function strokeLinejoin(value) {
  return Preact_Core.property("stroke-linejoin", value);
}

function strokeMiterlimit(value) {
  return Preact_Core.property("stroke-miterlimit", value);
}

function strokeOpacity(value) {
  return Preact_Core.property("stroke-opacity", value);
}

function strokeWidth(value) {
  return Preact_Core.property("stroke-width", value);
}

function surfaceScale(value) {
  return Preact_Core.property("surfaceScale", value);
}

function tabindex(value) {
  return Preact_Core.property("tabindex", value);
}

function targetX(value) {
  return Preact_Core.property("targetX", value);
}

function targetY(value) {
  return Preact_Core.property("targetY", value);
}

function textAnchor(value) {
  return Preact_Core.property("text-anchor", value);
}

function textDecoration(value) {
  return Preact_Core.property("text-decoration", value);
}

function textRendering(value) {
  return Preact_Core.property("text-rendering", value);
}

function textLength(value) {
  return Preact_Core.property("textLength", value);
}

function to$prime(value) {
  return Preact_Core.property("to", value);
}

function transform(value) {
  return Preact_Core.property("transform", value);
}

function type$prime(value) {
  return Preact_Core.property("type", value);
}

function underlinePosition(value) {
  return Preact_Core.property("underline-position", value);
}

function underlineThickness(value) {
  return Preact_Core.property("underline-thickness", value);
}

function values(value) {
  return Preact_Core.property("values", value);
}

function vectorEffect(value) {
  return Preact_Core.property("vector-effect", value);
}

function version(value) {
  return Preact_Core.property("version", value);
}

function viewBox(value) {
  return Preact_Core.property("viewBox", value);
}

function visibility(value) {
  return Preact_Core.property("visibility", value);
}

function width(value) {
  return Preact_Core.property("width", value);
}

function wordSpacing(value) {
  return Preact_Core.property("word-spacing", value);
}

function writingMode(value) {
  return Preact_Core.property("writing-mode", value);
}

function x(value) {
  return Preact_Core.property("x", value);
}

function x1(value) {
  return Preact_Core.property("x1", value);
}

function x2(value) {
  return Preact_Core.property("x2", value);
}

function xChannelSelector(value) {
  return Preact_Core.property("xChannelSelector", value);
}

function y(value) {
  return Preact_Core.property("y", value);
}

function y1(value) {
  return Preact_Core.property("y1", value);
}

function y2(value) {
  return Preact_Core.property("y2", value);
}

function yChannelSelector(value) {
  return Preact_Core.property("yChannelSelector", value);
}

export {
  a ,
  animate ,
  animateColor ,
  animateMotion ,
  animateTransform ,
  circle ,
  clipPath ,
  colorProfile ,
  cursor ,
  defs ,
  desc ,
  discard ,
  ellipse ,
  feBlend ,
  feColorMatrix ,
  feComponentTransfer ,
  feComposite ,
  feConvolveMatrix ,
  feDiffuseLighting ,
  feDisplacementMap ,
  feDistantLight ,
  feDropShadow ,
  feFlood ,
  feFuncA ,
  feFuncB ,
  feFuncG ,
  feFuncR ,
  feGaussianBlur ,
  feImage ,
  feMerge ,
  feMergeNode ,
  feMorphology ,
  feOffset ,
  fePointLight ,
  feSpecularLighting ,
  feSpotLight ,
  feTile ,
  feTurbulence ,
  filter ,
  font ,
  fontFace ,
  fontFaceFormat ,
  fontFaceName ,
  fontFaceSrc ,
  fontFaceUri ,
  foreignObject ,
  g ,
  glyph ,
  glyphRef ,
  hatch ,
  hatchpath ,
  hkern ,
  image ,
  line ,
  linearGradient ,
  marker ,
  mask ,
  mesh ,
  meshgradient ,
  meshpatch ,
  meshrow ,
  metadata ,
  missingGlyph ,
  mpath ,
  path ,
  pattern ,
  polygon ,
  polyline ,
  radialGradient ,
  rect ,
  script ,
  set ,
  solidcolor ,
  stop ,
  style$prime ,
  svg ,
  $$switch ,
  symbol ,
  text ,
  textPath ,
  title ,
  tref ,
  tspan ,
  unknown ,
  use ,
  view ,
  vkern ,
  accentHeight ,
  accumulate ,
  additive ,
  alignmentBaseline ,
  ascent ,
  attributeName ,
  attributeType ,
  azimuth ,
  baseFrequency ,
  baseProfile ,
  baselineShift ,
  begin$prime ,
  bias ,
  calcMode ,
  clipPath$prime ,
  clipRule ,
  clipPathUnits ,
  color ,
  colorInterpolation ,
  colorInterpolationFilters ,
  colorProfile$prime ,
  colorRendering ,
  contentScriptType ,
  contentStyleType ,
  cursor$prime ,
  cx ,
  cy ,
  d ,
  diffuseConstant ,
  direction ,
  display ,
  divisor ,
  dominantBaseline ,
  dur ,
  dx ,
  dy ,
  edgeMode ,
  elevation ,
  end$prime ,
  externalResourcesRequired ,
  fill ,
  fillOpacity ,
  fillRule ,
  filter$prime ,
  filterUnits ,
  floodColor ,
  floodOpacity ,
  fontFamily ,
  fontSize ,
  fontSizeAdjust ,
  fontStretch ,
  fontStyle ,
  fontVariant ,
  fontWeight ,
  fr ,
  from ,
  fx ,
  fy ,
  gradientTransform ,
  gradientUnits ,
  height ,
  href ,
  imageRendering ,
  in$prime ,
  in2 ,
  k1 ,
  k2 ,
  k3 ,
  k4 ,
  kernelMatrix ,
  kernelUnitLength ,
  kerning ,
  keySplines ,
  keyTimes ,
  lengthAdjust ,
  letterSpacing ,
  lightingColor ,
  limitingConeAngle ,
  local ,
  markerEnd ,
  markerMid ,
  markerStart ,
  markerHeight ,
  markerUnits ,
  markerWidth ,
  mask$prime ,
  maskContentUnits ,
  maskUnits ,
  max ,
  min ,
  mode ,
  numOctaves ,
  opacity ,
  operator ,
  order ,
  overflow ,
  overlinePosition ,
  overlineThickness ,
  paintOrder ,
  pathLength ,
  patternContentUnits ,
  patternTransform ,
  patternUnits ,
  pointerEvents ,
  points ,
  pointsAtX ,
  pointsAtY ,
  pointsAtZ ,
  preserveAlpha ,
  preserveAspectRatio ,
  primitiveUnits ,
  r ,
  radius ,
  refX ,
  refY ,
  repeatCount ,
  repeatDur ,
  requiredFeatures ,
  restart ,
  result ,
  rx ,
  ry ,
  scale ,
  seed ,
  shapeRendering ,
  specularConstant ,
  specularExponent ,
  stdDeviation ,
  stitchTiles ,
  stopColor ,
  stopOpacity ,
  strikethroughPosition ,
  strikethroughThickness ,
  stroke ,
  strokeDasharray ,
  strokeDashoffset ,
  strokeLinecap ,
  strokeLinejoin ,
  strokeMiterlimit ,
  strokeOpacity ,
  strokeWidth ,
  surfaceScale ,
  tabindex ,
  targetX ,
  targetY ,
  textAnchor ,
  textDecoration ,
  textRendering ,
  textLength ,
  to$prime ,
  transform ,
  type$prime ,
  underlinePosition ,
  underlineThickness ,
  values ,
  vectorEffect ,
  version ,
  viewBox ,
  visibility ,
  width ,
  wordSpacing ,
  writingMode ,
  x ,
  x1 ,
  x2 ,
  xChannelSelector ,
  y ,
  y1 ,
  y2 ,
  yChannelSelector ,
  
}
/* Preact_Core Not a pure module */
