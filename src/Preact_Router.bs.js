// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Preact_Core from "./Preact_Core.bs.js";
import * as Preact_Html from "./Preact_Html.bs.js";
import * as Hooks from "preact/hooks";

function fromString(string) {
  var path = Belt_List.fromArray(Belt_Array.keep(string.split("/"), (function (x) {
              return x !== "";
            })));
  return /* record */[/* path */path];
}

function toString(mode, url) {
  return (
          mode ? "#" : ""
        ) + ("/" + Belt_List.toArray(url[/* path */0]).join("/"));
}

function use(mode, param) {
  var get = function (param) {
    return fromString(mode ? window.location.hash.slice(1) : window.location.pathname);
  };
  var match = Preact_Core.useState(get(/* () */0), undefined);
  var setUrl = match[1];
  var url = match[0];
  Hooks.useEffect((function (param) {
          var f = function (param) {
            var url$prime = get(/* () */0);
            if (Caml_obj.caml_equal(url, url$prime)) {
              return /* () */0;
            } else {
              return Curry._1(setUrl, url$prime);
            }
          };
          window.addEventListener("popstate", f);
          return (function (param) {
                    window.removeEventListener("popstate", f);
                    return /* () */0;
                  });
        }), undefined, undefined);
  return url;
}

function dispatch(param) {
  window.dispatchEvent(new Event("popstate"));
  return /* () */0;
}

function push(mode, t) {
  window.history.pushState(/* () */0, "", toString(mode, t));
  return dispatch(/* () */0);
}

function replace(mode, t) {
  window.history.replaceState(/* () */0, "", toString(mode, t));
  return dispatch(/* () */0);
}

var Url = /* module */[
  /* fromString */fromString,
  /* toString */toString,
  /* use */use,
  /* dispatch */dispatch,
  /* push */push,
  /* replace */replace
];

function root(value) {
  return /* Parser */[(function (state) {
              return /* :: */[
                      /* record */[
                        /* url */state[/* url */0],
                        /* value */value
                      ],
                      /* [] */0
                    ];
            })];
}

var string = /* Parser */[(function (state) {
      var match = state[/* url */0][/* path */0];
      if (match) {
        return /* :: */[
                /* record */[
                  /* url : record */[/* path */match[1]],
                  /* value */Curry._1(state[/* value */1], match[0])
                ],
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    })];

var $$int = /* Parser */[(function (state) {
      var match = state[/* url */0][/* path */0];
      if (match) {
        try {
          return /* :: */[
                  /* record */[
                    /* url : record */[/* path */match[1]],
                    /* value */Curry._1(state[/* value */1], Caml_format.caml_int_of_string(match[0]))
                  ],
                  /* [] */0
                ];
        }
        catch (exn){
          return /* [] */0;
        }
      } else {
        return /* [] */0;
      }
    })];

function s(string) {
  return /* Parser */[(function (state) {
              var match = state[/* url */0][/* path */0];
              if (match && match[0] === string) {
                return /* :: */[
                        /* record */[
                          /* url : record */[/* path */match[1]],
                          /* value */state[/* value */1]
                        ],
                        /* [] */0
                      ];
              } else {
                return /* [] */0;
              }
            })];
}

function $less$slash$great(param, param$1) {
  var b = param$1[0];
  var a = param[0];
  return /* Parser */[(function (state) {
              return Belt_List.flatten(Belt_List.map(Curry._1(a, state), b));
            })];
}

function oneOf(parsers) {
  return /* Parser */[(function (state) {
              return Belt_List.flatten(Belt_List.map(parsers, (function (param) {
                                return Curry._1(param[0], state);
                              })));
            })];
}

function map(value, param) {
  var p = param[0];
  return /* Parser */[(function (state) {
              return Belt_List.map(Curry._1(p, /* record */[
                              /* url */state[/* url */0],
                              /* value */value
                            ]), (function (state$prime) {
                            return /* record */[
                                    /* url */state$prime[/* url */0],
                                    /* value */Curry._1(state[/* value */1], state$prime[/* value */1])
                                  ];
                          }));
            })];
}

function parse(param, url) {
  var state_001 = function (x) {
    return x;
  };
  var state = /* record */[
    /* url */url,
    state_001
  ];
  var _param = Curry._1(param[0], state);
  while(true) {
    var param$1 = _param;
    if (param$1) {
      var match = param$1[0];
      if (match[/* url */0][/* path */0]) {
        _param = param$1[1];
        continue ;
      } else {
        return Caml_option.some(match[/* value */1]);
      }
    } else {
      return undefined;
    }
  };
}

var Parser = /* module */[
  /* root */root,
  /* string */string,
  /* int */$$int,
  /* s */s,
  /* </> */$less$slash$great,
  /* oneOf */oneOf,
  /* map */map,
  /* parse */parse
];

function $less$slash$great$1(url, segment) {
  return /* record */[/* path */Pervasives.$at(url[/* path */0], /* :: */[
                segment,
                /* [] */0
              ])];
}

function $$int$1(prim) {
  return prim.toString();
}

var Builder_000 = /* root : record */[/* path : [] */0];

var Builder = /* module */[
  Builder_000,
  /* </> */$less$slash$great$1,
  /* int */$$int$1
];

function Make(S) {
  var mode = S[/* mode */0];
  var parse = S[/* parse */1];
  var build = S[/* build */2];
  var link = function (t, props, children) {
    return Preact_Html.a(/* :: */[
                Preact_Html.href(toString(S[/* mode */0], Curry._1(build, t))),
                props
              ], children);
  };
  var use$1 = function (param, param$1) {
    return Curry._1(parse, use(mode, undefined));
  };
  var push$1 = function (t) {
    return push(mode, Curry._1(build, t));
  };
  var replace$1 = function (t) {
    return replace(mode, Curry._1(build, t));
  };
  return /* module */[
          /* mode */mode,
          /* parse */parse,
          /* build */build,
          /* link */link,
          /* use */use$1,
          /* push */push$1,
          /* replace */replace$1
        ];
}

export {
  Url ,
  Parser ,
  Builder ,
  Make ,
  
}
/* Preact_Core Not a pure module */
